#!/usr/bin/python

"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""


triangle_numbers = []

for n in range(1,100):
	t = n*(n+1)/2
	triangle_numbers.append(t)
	# t is the nth triangle number.

	divisors_t = set()
	for m in range(1,int(t**2)):
		if t % m == 0:
			divisors_t.add(m)
	# list all the divisors of each triangle number t
	print "the divisors of " + str(t) + " are " + str(divisors_t)	

	# this can be sped up by checking to see if t is prime. if not 
	
	if 2 * len(divisors_t) > 500:
	# check the length of the list of divisors
		print "the first triangle number with over five hundred divisors is " + str(t)
		break


print triangle_numbers


